<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.yph.infcenter.mapper.RoleMapper" >
  <resultMap id="BaseResultMap" type="com.yph.infcenter.entity.Role" >
    <id column="role_id" property="roleId" jdbcType="INTEGER" />
    <result column="role_code" property="roleCode" jdbcType="VARCHAR" />
    <result column="role_name" property="roleName" jdbcType="VARCHAR" />
    <result column="remark" property="remark" jdbcType="VARCHAR" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="creator" property="creator" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Base_Column_List" >
    role_id, role_code, role_name, remark, create_time, creator
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from eph_public_role
    where role_id = #{roleId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from eph_public_role
    where role_id = #{roleId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.yph.infcenter.entity.Role" >
    insert into eph_public_role (role_id, role_code, role_name, 
      remark, create_time, creator
      )
    values (#{roleId,jdbcType=INTEGER}, #{roleCode,jdbcType=VARCHAR}, #{roleName,jdbcType=VARCHAR}, 
      #{remark,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{creator,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.yph.infcenter.entity.Role" >
    insert into eph_public_role
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="roleId != null" >
        role_id,
      </if>
      <if test="roleCode != null" >
        role_code,
      </if>
      <if test="roleName != null" >
        role_name,
      </if>
      <if test="remark != null" >
        remark,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="creator != null" >
        creator,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="roleId != null" >
        #{roleId,jdbcType=INTEGER},
      </if>
      <if test="roleCode != null" >
        #{roleCode,jdbcType=VARCHAR},
      </if>
      <if test="roleName != null" >
        #{roleName,jdbcType=VARCHAR},
      </if>
      <if test="remark != null" >
        #{remark,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="creator != null" >
        #{creator,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.yph.infcenter.entity.Role" >
    update eph_public_role
    <set >
      <if test="roleCode != null" >
        role_code = #{roleCode,jdbcType=VARCHAR},
      </if>
      <if test="roleName != null" >
        role_name = #{roleName,jdbcType=VARCHAR},
      </if>
      <if test="remark != null" >
        remark = #{remark,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="creator != null" >
        creator = #{creator,jdbcType=INTEGER},
      </if>
    </set>
    where role_id = #{roleId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.yph.infcenter.entity.Role" >
    update eph_public_role
    set role_code = #{roleCode,jdbcType=VARCHAR},
      role_name = #{roleName,jdbcType=VARCHAR},
      remark = #{remark,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      creator = #{creator,jdbcType=INTEGER}
    where role_id = #{roleId,jdbcType=INTEGER}
  </update>
  
  <!-- 查询当前用户拥有的角色 -->
  <select id="findRoleByUserId" parameterType="int" resultMap="BaseResultMap">
	SELECT r.* FROM eph_public_employee e 
	JOIN eph_public_employee_role_relation err ON e.employee_id = err.employee_id
	JOIN eph_public_role r  ON r.role_id = err.role_id 
	WHERE e.employee_id  = #{userId}
  </select>
  
  <!-- 列表查询条件 -->
  <sql id="whereClause">
  	<if test="roleCode != null">
  		and r.role_code like '${roleCode}%'
  	</if>
  	<if test="roleName != null">
  		and r.role_name like '${roleName}%'
  	</if>
  </sql>
  
  <!-- 角色管理列表分页查询 -->
  <select id="findAllRetMapByPage" resultType="hashmap" parameterType="hashmap">
	SELECT
		r.role_id,
		r.role_code,
		r.role_name,
		r.remark,
		r.create_time	
	FROM eph_public_role r
	WHERE 1 = 1
	<include refid="whereClause" />
	order by r.role_id ASC
	limit #{startIndex},#{pageSize}
  </select>
  
  <!-- 角色管理列表分页查询记录总数  -->
  <select id="findAllByPageCount" resultType="long" parameterType="hashmap">
	SELECT count(r.role_id) FROM eph_public_role r WHERE 1 = 1
	<include refid="whereClause" />
  </select>
  
  <!-- 查询所有角色不分页 -->
  <select id="findAllRetMapNoPage" resultType="hashmap" parameterType="hashmap">
	SELECT r.`role_id`,r.`role_code`,r.`role_name`,r.`remark` FROM eph_public_role r order by r.create_time asc
  </select>
  
  <!-- 查询所有角色，并且标识出当前员工拥有的角色 -->
  <select id="authorizationEmpList" parameterType="int" resultType="hashmap">
	SELECT 
	  r.`role_id`,
	  r.`role_code`,
	  r.`role_name`,
	  r.`remark`,
	  (CASE
	      WHEN (r.role_id IN (select err.role_id from eph_public_employee_role_relation err where err.employee_id = #{employeeId})) THEN 'Y' 
	      ELSE 'N' 
	    END) AS is_authorized 
	FROM eph_public_role r order by r.create_time asc
  </select>
  
  <!-- 查询所有角色，并且标识出菜单拥有的角色 -->
  <select id="authorizationMenuList" parameterType="int" resultType="hashmap">
	SELECT 
	  r.`role_id`,
	  r.`role_code`,
	  r.`role_name`,
	  r.`remark`,
	  (CASE
	      WHEN (r.role_id IN (SELECT rmr.role_id FROM eph_public_role_menu_relation rmr WHERE rmr.menu_id = #{menuId})) THEN 'Y' 
	      ELSE 'N' 
	    END) AS is_authorized 
	FROM eph_public_role r order by r.create_time asc
   </select> 
   
  <!-- 查询所有角色，并且标识出控件按钮拥有的角色 -->
  <select id="authorizationControlList" parameterType="int" resultType="hashmap">
	SELECT 
	  r.`role_id`,
	  r.`role_code`,
	  r.`role_name`,
	  r.`remark`,
	  (CASE
	      WHEN (r.role_id IN (SELECT crr.role_id FROM eph_public_control_role_relation crr WHERE crr.control_id = #{controlId})) THEN 'Y' 
	      ELSE 'N' 
	    END) AS is_authorized 
	FROM eph_public_role r order by r.create_time asc
  </select> 
</mapper>